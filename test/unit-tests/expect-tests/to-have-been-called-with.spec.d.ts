export declare class ToHaveBeenCalledWithTests {
    functionCalledPasses(): void;
    functionNotCalledFails(): void;
    functionNotCalledFailsWithCorrectError(): void;
    functionCalledWithCorrectArgumentsPasses(expectedArguments: Array<any>): void;
    functionCalledWithSimilarArgumentsFailsWithCorrectError(expectedArguments: Array<any>, actualArguments: Array<any>): void;
    functionCalledWithWrongNumberOfArgumentsFailsWithCorrectError(expectedArguments: Array<any>, actualArguments: Array<any>): void;
    functionCalledWithRightArgumentsInWrongOrderFailsWithCorrectError(expectedArguments: Array<any>, actualArguments: Array<any>): void;
    functionNotCalledPassesWhenShouldNotCall(): void;
    functionThrowsErrorFailsWhenShouldNotThrow(): void;
    functionThrowsErrorFailsWithCorrectError(): void;
    functionCalledWithSimilarArgumentsPasses(expectedArguments: Array<any>, actualArguments: Array<any>): void;
    functionCalledWithWrongNumberOfArgumentsPasses(expectedArguments: Array<any>, actualArguments: Array<any>): void;
    functionNotCalledWithRightArgumentsInWrongOrderPasses(expectedArguments: Array<any>, actualArguments: Array<any>): void;
    functionNotCalledWithDifferentArgumentsFailsWithCorrectError(expectedArguments: Array<any>): void;
    checkingWhetherNonFunctionSpyOrSpiedOnFunctionHasBeenCalledShouldThrow(actualValue: any): void;
    checkingWhetherNonFunctionSpyOrSpiedOnFunctionHasNotBeenCalledShouldThrow(actualValue: any): void;
    actualValueAndShouldMatchShouldBeSetToFunctionWasNotCalledWithArguments(actualArgumentsList: Array<Array<any>>): void;
    actualValueAndShouldNotMatchShouldBeSetToFunctionWasCalledWithArguments(actualArgumentsList: Array<Array<any>>): void;
    expectedValueAndShouldMatchShouldBeSetToFunctionToBeCalledWithArguments(expectedArguments: Array<any>): void;
    expectedValueAndShouldNotMatchShouldBeSetToFunctionNotToBeCalledWithArguments(expectedArguments: Array<any>): void;
    anyArgumentShouldNotThrowIfOneArgument(argument: any): void;
    anyArgumentShouldNotThrowIfTwoArguments(): void;
    anyArgumentShouldNotThrowIfThreeArguments(): void;
    anyArgumentShouldThrowIfOneArgumentExpectedAndNotProvided(...callArguments: Array<any>): void;
    anyArgumentShouldThrowIfTwoArgumentsExpectedAndNotProvided(...callArguments: Array<any>): void;
    anyArgumentShouldThrowWithExpectedMessageIfOneArgumentExpectedAndNotProvided(...callArguments: Array<any>): void;
    anyArgumentShouldThrowWithexpectedMessageIfTwoArgumentsExpectedAndNotProvided(...callArguments: Array<any>): void;
    anyNumberArgumentShouldNotThrowIfNumberArgument(argument: any): void;
    anyNumberArgumentShouldNotBeCalledShouldThrowIfNumberArgument(argument: any): void;
    anyNumberArgumentShouldThrowIfNonNumberArgument(argument: any): void;
    anyNumberArgumentShouldThrowWithExpectedValueIfNonNumberArgument(argument: any): void;
    anyStringArgumentShouldNotThrowIfStringArgument(argument: any): void;
    anyStringArgumentShouldNotBeCalledShouldThrowIfStringArgument(argument: any): void;
    anyStringArgumentShouldThrowIfNonStringArgument(argument: any): void;
    anyStringArgumentShouldThrowWithExpectedValueIfNonStringArgument(argument: any): void;
    anyBooleanArgumentShouldNotThrowIfBooleanArgument(argument: any): void;
    anyBooleanArgumentShouldNotBeCalledShouldThrowIfBooleanArgument(argument: any): void;
    anyBooleanArgumentShouldThrowIfNonBooleanArgument(argument: any): void;
    anyBooleanArgumentShouldThrowWithExpectedValueIfNonBooleanArgument(argument: any): void;
    anyObjectArgumentShouldNotThrowIfObjectArgument(argument: any): void;
    anyObjectArgumentShouldNotBeCalledShouldThrowIfObjectArgument(argument: any): void;
    anyObjectArgumentShouldThrowIfNonObjectArgument(argument: any): void;
    anyObjectArgumentShouldThrowWithExpectedValueIfNonObjectArgument(argument: any): void;
    anyArrayArgumentShouldNotThrowIfArrayArgument(argument: any): void;
    anyArrayArgumentShouldNotBeCalledShouldThrowIfArrayArgument(argument: any): void;
    anyArrayArgumentShouldThrowIfNonArrayArgument(argument: any): void;
    anyArrayArgumentShouldThrowWithExpectedValueIfNonArrayArgument(argument: any): void;
    anyErrorArgumentShouldNotThrowIfErrorArgument(argument: any): void;
    anyErrorArgumentShouldNotBeCalledShouldThrowIfErrorArgument(argument: any): void;
    anyErrorArgumentShouldThrowIfNonErrorArgument(argument: any): void;
    anyErrorArgumentShouldThrowWithExpectedValueIfNonErrorArgument(argument: any): void;
    expectedAnyArgumentAndAnyTypeArgumentGivenCorrectArgumentsPass(argument: any, type: new (...args: Array<any>) => object): void;
    expectedAnyArgumentAndAnyTypeArgumentToThorwGivenIncorrectArgumentTypesPass(argument: any, type: new (...args: Array<any>) => object): void;
    expectedAnyTypeArgumentAndAnyArgumentGivenCorrectArgumentsPass(argument: any, type: new (...args: Array<any>) => object): void;
    expectedAnyTypeArgumentAndAnyArgumentToThorwGivenIncorrectArgumentTypesPass(argument: any, type: new (...args: Array<any>) => object): void;
    expectedExactArgumentAndAnyTypeArgumentGivenCorrectArgumentsPass(argument: any, type: new (...args: Array<any>) => object): void;
    expectedExactArgumentAndAnyTypeArgumentToThorwGivenIncorrectArgumentTypesPass(argument: any, type: new (...args: Array<any>) => object): void;
    expectedAnyTypeArgumentAndExactArgumentGivenCorrectArgumentsPass(argument: any, type: new (...args: Array<any>) => object): void;
    expectedAnyTypeArgumentAndExactArgumentToThorwGivenIncorrectArgumentTypesPass(argument: any, type: new (...args: Array<any>) => object): void;
    expectedExactArgumentAndAnyArgumentGivenCorrectArgumentsPass(argument: any): void;
    expectedAnyArgumentAndExactArgumentGivenCorrectArgumentsPass(argument: any): void;
    calledExactlyCorrectNumberOfTimesWithCorrectArgumentsPasses(expectedCallCount: number): void;
    calledExactlyCorrectNumberOfTimesWithCorrectAnyArgumentsPasses(expectedCallCount: number): void;
    calledExactlyCorrectNumberOfTimesWithCorrectAnyTypeArgumentsPasses(expectedCallCount: number): void;
    calledExactlyCorrectNumberOfTimesWithWrongArgumentsThrowsError(expectedCallCount: number): void;
    calledExactlyCorrectNumberOfTimesWithRightArgumentsInTheWrongOrderThrowsError(expectedCallCount: number): void;
    calledAnythingButCorrectNumberOfTimesWithCorrectArgumentsPasses(notExpectedCallCount: number, actualCallCount: number): void;
    calledAnythingButCorrectNumberOfTimesWithCorrectAnyArgumentsPasses(notExpectedCallCount: number, actualCallCount: number): void;
    calledAnythingButCorrectNumberOfTimesWithCorrectAnyTypeArgumentsPasses(notExpectedCallCount: number, actualCallCount: number): void;
    calledAnythingButCorrectNumberOfTimesWithExtraCallWithWrongArgumentsThrowsError(expectedCallCount: number): void;
    calledAnythingButCorrectNumberOfTimesWithExtraCallWithArgumentsInWrongOrderThrowsError(expectedCallCount: number): void;
    calledGreaterThanCorrectNumberOfTimesWithCorrectArgumentsPasses(minimumCallCount: number, actualCallCount: number): void;
    calledGreaterThanCorrectNumberOfTimesWithCorrectAnyArgumentsPasses(minimumCallCount: number, actualCallCount: number): void;
    calledGreaterThanCorrectNumberOfTimesWithCorrectAnyTypeArgumentsPasses(minimumCallCount: number, actualCallCount: number): void;
    calledGreaterThanCorrectNumberOfTimesWithOneCallWithWrongArgumentsThrowsError(minimumCallCount: number): void;
    calledGreaterThanCorrectNumberOfTimesWithExtraCallWithArgumentsInWrongOrderThrowsError(minimumCallCount: number): void;
    calledLessThanCorrectNumberOfTimesWithCorrectArgumentsPasses(maximumCallCount: number, actualCallCount: number): void;
    calledLessThanCorrectNumberOfTimesWithCorrectAnyArgumentsPasses(maximumCallCount: number, actualCallCount: number): void;
    calledLessThanCorrectNumberOfTimesWithCorrectAnyTypeArgumentsPasses(maximumCallCount: number, actualCallCount: number): void;
    calledLessThanCorrectNumberOfTimesWithOneCallWithWrongArgumentsPasses(maximumCallCount: number): void;
    calledLessThanCorrectNumberOfTimesWithExtraCallWithArgumentsInWrongOrderPasses(maximumCallCount: number): void;
    calledTheSameTimesWhenExpectedLessThanThrowsError(maximumCallCount: number): void;
    calledOneMoreTimesWhenExpectedLessThanThrowsError(maximumCallCount: number): void;
}
